AWSTemplateFormatVersion: 2010-09-09
Description: Medication Sharing App Backend Stack

Parameters:
  # Input parameter to specify deployment stage (e.g., dev, prod)
  StageName:
    Type: String
    Default: prod
    Description: Deployment stage name

Resources:
  # Cognito User Pool for managing user authentication and sign-up/sign-in
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: MedicationSharingUserPool
      AutoVerifiedAttributes:
        - email  # Automatically verify user emails
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false  # Password complexity requirements

  # Cognito User Pool Client to allow applications to connect to User Pool
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: MedicationSharingAppClient
      UserPoolId: !Ref UserPool  # Reference the above user pool
      GenerateSecret: false  # No client secret generated (for web/mobile apps)
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH  # Allow admin authentication flows
        - USER_PASSWORD_AUTH # Allow username/password auth
        - USER_SRP_AUTH      # Allow Secure Remote Password protocol

  # API Gateway REST API - main entry point for client HTTP requests
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MedicationSharingApi

  # API Gateway Resource under root path with "medication" on URL
  ApiGatewayResourceRoot:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId  # Root resource of the API
      PathPart: medication  # URL path segment
      RestApiId: !Ref ApiGatewayRestApi

  # DynamoDB table to store medication offers data with keys and index
  MedicationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MedicationOffers
      AttributeDefinitions:
        - AttributeName: OfferId
          AttributeType: S  # String type primary key
        - AttributeName: Location
          AttributeType: S  # Secondary index attribute
      KeySchema:
        - AttributeName: OfferId
          KeyType: HASH  # Partition key
      ProvisionedThroughput:
        ReadCapacityUnits: 5  # Read throughput capacity
        WriteCapacityUnits: 5  # Write throughput capacity
      GlobalSecondaryIndexes:
        - IndexName: LocationIndex  # Secondary index for location-based queries
          KeySchema:
            - AttributeName: Location
              KeyType: HASH
          Projection:
            ProjectionType: ALL  # Project all attributes into the index
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

  # IAM Role to allow Lambda function to access DynamoDB and CloudWatch Logs
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MedicationAppLambdaRole
      # Policy document allowing Lambda service to assume this role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaDynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource: !GetAtt MedicationTable.Arn  # Permissions on MedicationTable
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*  # Permissions for logging to CloudWatch

  # Lambda function to handle backend logic of Medication Sharing App
  MedicationLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MedicationSharingBackend
      Handler: index.handler  # Entry point in Python code
      Role: !GetAtt LambdaExecutionRole.Arn  # Execution role allowing permissions
      Runtime: python3.9
      Code:
        ZipFile: |  # Inline Python Lambda code
          import json
          def handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps({'message': 'Medication Sharing App backend working'})
              }

  # API Gateway GET method integration with the Lambda function
  MedicationGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref ApiGatewayResourceRoot  # "medication" resource
      RestApiId: !Ref ApiGatewayRestApi
      AuthorizationType: NONE  # No auth on this method (for demo)
      Integration:
        Type: AWS_PROXY  # Lambda proxy integration
        IntegrationHttpMethod: POST  # POST to invoke Lambda
        Uri: !Sub
          - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - Region: !Ref "AWS::Region"
            LambdaArn: !GetAtt MedicationLambdaFunction.Arn
      MethodResponses:
        - StatusCode: 200  # Successful response

  # API Gateway deployment stage setup to deploy the API
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - MedicationGetMethod  # Ensure method is created before deploy
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref StageName  # Use input parameter value (e.g., "prod")

  # Permission to allow API Gateway to invoke the Lambda function
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MedicationLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*/*

Outputs:
  # Output the base URL for accessing the API Gateway endpoint
  ApiUrl:
    Description: "Base URL for API Gateway"
    Value: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/medication
